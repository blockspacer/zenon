
export template <T>
variant nullable {
  T value;
  void null;
};

export template <T>
bool ok(nullable<T>* v) {
  switch (*v) {
    case (T* value) {
      return true;
    }
    case (null) {
      return false;
    }
  }
}

export template <T>
bool operator !(nullable<T>* v) {
  switch (*v) {
    case (T* value) {
      return false;
    }
    case (null) {
      return true;
    }
  }
}

export template <T>
T* operator *(nullable<T>* v) {
  switch (*v) {
    case (T* value) {
      return value;
    }
    case (null) {
      embed {
        struct NullAccessException {};
        throw NullAccessException{};
      }
    }
  }
}

export template <T>
nullable<T> value(mutable T v) {
  return nullable<T>::value(move(v));
}

export template <T>
nullable<T> null() {
  return nullable<T>::null();
}

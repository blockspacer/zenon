
export template <T>
variant expected {
  T value;
  string error;
};

export template <T>
bool operator !(expected<T>* v) {
  switch (*v) {
    case (T* value) {
      return false;
    }
    case (string* error) {
      return true;
    }
  }
}

export template <T>
T* operator *(expected<T>* v) {
  switch (*v) {
    case (T* value) {
      return value;
    }
    case (string* error) {
      embed {
        throw error->data();
      }
    }
  }
}

export template <T>
string get_error(expected<T>* v) {
  switch (*v) {
    case (T* value) {
      embed {
        struct NullAccessException {};
        throw NullAccessException{};
     }
    }
    case (string* error) {
      return *error;
    }
  }
}

export template <T>
expected<T> result(mutable T v) {
  return expected<T>::value(move(v));
}

export template <T>
expected<T> error(string e) {
  return expected<T>::error(e);
}
